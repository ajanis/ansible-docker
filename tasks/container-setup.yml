---

- name: "Ensure directory paths exist for Docker Volume"
  file:
    state: directory
    path: "{{ item.1.split(':')[0] }}"
  loop: "{{ docker_containers|subelements('volumes') }}"
  loop_control:
    label: "{{ item.1.split(':')[0] }}"
  when:
    - docker_containers is defined
    - docker_containers != None
    - item.1.split(':')[0] is search('/data/')


- name: Create Docker Containers
  docker_container:
    name: "{{ item.key }}"
    hostname: "{{ item.key }}"
    image: "{{ item.value.image }}"
    env: "{{ item.value.env | default(omit) }}"
    state: present
    pull: "{{ item.value.pull | default('no') }}"
    comparisons:
      image: strict
      volumes: strict
      env: strict
      devices: strict
      networks: strict
      user: strict
      hostname: strict
    recreate: no
    capabilities: "{{ item.value.cap_add | default(omit) }}"
    cap_drop: "{{ item.value.cap_drop | default(omit) }}"
    user: "{{ item.value.user | default(omit) }}"
    network_mode: "{{ item.value.network_mode | default('bridge') }}"
    networks: "{{ item.value.networks | default(omit) }}"
    published_ports: "{{ item.value.ports | default(omit) }}"
    volumes: "{{ item.value.volumes | default(omit) }}"
    devices: "{{ item.value.devices | default(omit) }}"
    command: "{{ item.value.command | default(omit) }}"
    restart_policy: "{{ item.restart_policy | default('unless-stopped') }}"
    links: "{{ item.value.links | default(omit) }}"
    privileged: "{{ item.value.privileged | default('no') }}"
    networks_cli_compatible: |
      {% if item.value.networks is defined %}
        yes
      {% else %}
        no
      {% endif %}
    log_driver: "{{ item.value.log_driver | default('journald') }}"
    log_options: "{{ item.value.log_options | default({'tag': item.key}) }}"
  loop: "{{ docker_containers|dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when:
    - docker_containers is defined
    - docker_containers != None


#- name: Generate docker-compose project files
#  template:
#    src: docker-compose.yml.j2
#    dest: "{{ item.config_path }}/docker-compose.yml"
#  loop: "{{ docker_compose_projects }}"
#  vars:
#    services: "{{ item.services }}"
#    networks: "{{ item.networks }}"
#  when:
#    - docker_compose_projects is defined
#    - docker_compose_projects != None
#
#- name: Bring up docker-compose projects
#  docker_compose:
#    project_src: "{{ item.config_path }}"
#    pull: "{{ item.pull | default('no') }}"
#    state: present
#  loop: "{{ docker_compose_projects }}"
#  when:
#    - docker_compose_projects is defined
#    - docker_compose_projects != None

- name: Bring up docker-compose projects
  docker_compose:
    project_name: "{{ item.project_name }}"
    pull: "{{ item.pull | default('no') }}"
    state: present
    definition: "{{ item.definition }}"
  loop: "{{ docker_compose_projects }}"
  loop_control:
    label: "{{ item.project_name }}"
  when:
    - docker_compose_projects is defined
    - docker_compose_projects != None
  register: compose_up_output
