---
- name: Collect additional docker configs
  block:
    - name: Check for GPU presence
      ansible.builtin.command:
        cmd: nvidia-smi -L
      register: nvidia_presence
      changed_when: false
      failed_when: false

    - name: Check for Docker presence
      ansible.builtin.command:
        cmd: docker -v
      register: docker_presence
      changed_when: false
      failed_when: false

    - name: GPU Configurations
      when:
        - "'GPU' in nvidia_presence.stdout"
      block:
        - name: Print GPU info
          ansible.builtin.debug:
            msg: "{{ nvidia_presence.stdout }}"

        - name: Set 'has_gpu' fact
          ansible.builtin.set_fact:
            has_gpu: true

    - name: Docker Configurations
      when:
        - "'version' in docker_presence.stdout"

      block:
        - name: Print Docker info
          ansible.builtin.debug:
            msg: "{{ docker_presence.stdout }}"
        - name: Set 'has_docker' fact
          ansible.builtin.set_fact:
            has_docker: true
        - name: Check for existing docker daemon config
          ansible.builtin.stat:
            path: /etc/docker/daemon.json
          register: docker_daemon_json
        - name: Echo docker config content
          ansible.builtin.debug:
            var: docker_daemon_json
            verbosity: 1
        - name: Slurp JSON from file
          ansible.builtin.slurp:
            src: /etc/docker/daemon.json
          register: docker_daemon_configfile
          when:
            - docker_daemon_json.stat.exists
        - name: Echo docker config content
          ansible.builtin.debug:
            var: docker_daemon_configfile.content|b64decode
            verbosity: 1
          when:
            - docker_daemon_json.stat.exists

    - name: Update Docker daemon config
      block:
        - name: Set empty array for docker daemon config
          ansible.builtin.set_fact:
            docker_daemon_config: {}
          when:
            - not docker_daemon_json.stat.exists
        - name: Set daemon config to existing file content if found
          ansible.builtin.set_fact:
            docker_daemon_config: "{{ docker_daemon_configfile.content | b64decode }}"
          when:
            - docker_daemon_json.stat.exists

        - name: Echo docker config content
          ansible.builtin.debug:
            var: docker_daemon_config|to_nice_json
            verbosity: 1
          when:
            - docker_daemon_json.stat.exists

        - name: Add experimental metrics endpoint
          ansible.builtin.set_fact:
            docker_daemon_config: "{{ docker_daemon_config | combine({'experimental': true, 'metrics-addr': '0.0.0.0:9323'}, recursive=true) }}"
          when:
            - has_docker|default(false)
            - "'metrics-addr' not in docker_daemon_config|default({})"

        - name: Echo docker config content
          ansible.builtin.debug:
            var: docker_daemon_config|to_nice_json
            verbosity: 1

        - name: Add Nvidia runtime to docker daemon config
          ansible.builtin.set_fact:
            docker_daemon_config: |
              {{ docker_daemon_config
                | combine({
                  'default-runtime': 'nvidia',
                  'runtimes': {
                    'nvidia': {
                      'path': 'nvidia-container-runtime',
                      'args': []
                    }
                  }
                }, recursive=true)
              }}
          when:
            - has_gpu|default(false)
            - "'nvidia' not in docker_daemon_config.runtimes|default({})"
            - "'default-runtime' not in docker_daemon_configs|default({})"

        - name: Echo docker config content
          ansible.builtin.debug:
            var: docker_daemon_config|to_nice_json
            verbosity: 1

        - name: Write modified Docker daemon json
          ansible.builtin.copy:
            content: "{{ docker_daemon_config | to_nice_json }}"
            dest: /etc/docker/daemon.json
            mode: "0755"
          notify: Reload Docker

- name: Update docker systemd service
  block:
    - name: Create systemd Docker service.d directory
      ansible.builtin.file:
        path: /etc/systemd/system/docker.service.d
        state: directory
        mode: "0644"
        owner: root
        group: root
      notify: Reload Docker

    - name: Create systemd Docker override config
      ansible.builtin.template:
        src: docker-override.conf.j2
        dest: /etc/systemd/system/docker.service.d/override.conf
        mode: "0644"
      register: docker_override
      notify: Reload Docker

    - name: Set docker ExecStart
      ansible.builtin.set_fact:
        docker_execstart: ExecStart=/usr/bin/dockerd -H unix:///var/run/docker.sock {% if docker_socket_listen %}-H tcp://{{ docker_socket_ip | default('0.0.0.0')
          }}:{{ docker_socket_port | default('2375') }}{% endif %} --containerd=/run/containerd/containerd.sock

    - name: Expose docker socket over TCP
      ansible.builtin.lineinfile:
        line: "{{ docker_execstart }}"
        path: /etc/systemd/system/multi-user.target.wants/docker.service
        backup: true
        regexp: ^ExecStart=.*$
        state: present
      notify: Reload Docker

- name: Flush handlers
  ansible.builtin.meta: flush_handlers

- name: Register, enable and start or restart docker service
  ansible.builtin.systemd:
    name: docker
    state: "{{ 'restarted' if (docker_requires_reload | default(false)) else 'started' }}"
    enabled: true
    daemon_reload: true
