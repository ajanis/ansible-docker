---
- name: "Disable SELinux, Configure FirewallD ports to ACCEPT [RHEL/CentOS]"
  block:
    - name: Disable SELinux
      selinux:
        state: disabled
    - name: Configure Firewalld allowed ports
      firewalld:
        port: "{{ item }}"
        permanent: yes
        immediate: yes
        state: enabled
      loop: "{{ docker_allowed_ports }}"

- name: Install Docker Community Edition
  block:
    - name: Remove old Docker versions
      yum:
        name:
          - docker
          - docker-client
          - docker-client-latest
          - docker-common
          - docker-latest
          - docker-latest-logrotate
          - docker-logrotate
          - docker-engine
        state: absent

    - name: Install Docker GPG Key
      rpm_key:
        key: "{{ docker_repo_url }}/{{ ansible_distribution | lower }}/gpg"
        state: present
    - name: Set up Docker Community Edition repo
      yum_repository:
        baseurl: "{{ docker_repo_url }}/{{ ansible_distribution | lower }}/$releasever/$basearch/{{ docker_ce_version }}"
        name: docker-ce
        description: Docker Community Edition
    - name: Install Docker Community Edition
      yum:
        name: "{{ docker_ce_pkgs }}"
        update_cache: yes
        state: present
  when:
    - docker_install_community_edition
    - ansible_distribution_major_version is version('7', '<=')
  tags:
    - install-docker-ce

- name: Install Docker Community Edition
  block:
    - name: Remove old Docker versions
      yum:
        name:
          - docker
          - docker-client
          - docker-client-latest
          - docker-common
          - docker-latest
          - docker-latest-logrotate
          - docker-logrotate
          - docker-engine
        state: absent

    - name: Install Docker GPG Key
      rpm_key:
        key: "{{ docker_repo_url }}/{{ ansible_distribution | lower }}/gpg"
        state: present
    - name: Set up Docker Community Edition repo
      yum_repository:
        baseurl: "{{ docker_repo_url }}/{{ ansible_distribution | lower }}/7/$basearch/{{ docker_ce_version }}"
        name: docker-ce
        description: Docker Community Edition
    - name: manually install containerd.io
      yum:
        name: https://download.docker.com/linux/centos/7/x86_64/stable/Packages/containerd.io-1.2.6-3.3.el7.x86_64.rpm
    - name: Install Docker Community Edition
      yum:
        name: "{{ docker_ce_pkgs }}"
        update_cache: yes
        state: latest
  when:
    - docker_install_community_edition
    - ansible_distribution_major_version is version('8', '>=')
  tags:
    - install-docker-ce

- name: Install Docker from OS Repository
  block:
    - name: Remove old Docker versions
      yum:
        name:
          - docker
          - docker-client
          - docker-client-latest
          - docker-common
          - docker-latest
          - docker-latest-logrotate
          - docker-logrotate
          - docker-engine
        state: absent
    - name: Install Docker from OS Repo
      yum:
        name: "{{ docker_io_pkgs }}"
        update_cache: yes
        state: latest
  when:
    - not docker_install_community_edition
  tags:
    - install-docker-osversion

- name: Install runtime environments, packages, modules and configurations for docker nvidia support
  block:
    - name: Blacklist nouveau kernel module when cuda cards are present
      copy:
        dest: /etc/modprobe.d/blacklist-nouveau.conf
        content: |
          blacklist nouveau
          options nouveau modset=0
        mode: 0644
      notify: initramfs requires update
      register: blacklist_nouveau

    - meta: flush_handlers

    - name: update dracut
      shell:
        cmd: dracut --force
      register: dracut_update_result
      when:
        - dracut_requires_update|default(False)

    - name: Reboot after initramfs update and nouveau module blacklist
      reboot:
        connect_timeout: 10
        reboot_timeout: 600
        msg: Rebooting system via Ansible
      when:
        - dracut_requires_update|default(False)
        - dracut_update_result is defined
        - dracut_update_result.rc -eq 0

    - name: enable EPEL repo
      yum:
        name: "{{ epel_rpm }}"
        state: present

    - name: install yum repository for drivers
      yum_repository:
        file: "cuda-{{ ansible_distribution }}"
        baseurl: "http://developer.download.nvidia.com/compute/cuda/repos//{{ ansible_distribution }}/{{ ansible_machine }}"
        state: present

    - name: Add repositories for nvidia docker drivers, runtime environments, packages
      get_url:
        url: "https://nvidia.github.io/nvidia-docker/{{ ansible_distribution|lower }}{{ ansible_lsb.release  }}/nvidia-docker.list"
        dest: /etc/apt/sources.list.d/nvidia-docker.list
        mode: 644

    - name: Install dependencies for building kernel modules and drivers
      package:
        name: "{{ nvidia_driver_dependencies }}"
        state: present

    - name: install video driver for our card
      yum:
        name: "{{ nvidia_driver_packages }}"
        state: latest
        autoclean: yes
        update_cache: yes
      notify: reload docker

    - name: Install nvidia-docker and container runtime
      yum:
        name: "{{ nvidia_docker_packages }}"
        state: present
        autoclean: yess
        update_cache: yes
      notify: reload docker

    - name: Add nvidia runtime to docker
      copy:
        src: docker-daemon.json
        dest: /etc/docker/daemon.json
        owner: root
        group: root
        mode: 0664
      notify: reload docker
  when:
    - docker_install_nvidia
  tags:
    - install-docker-nvidia

- name: Reboot host if necessary
  block:
    - meta: flush_handlers

    - name: Reboot after docker updates
      reboot:
        connect_timeout: 10
        reboot_timeout: 600
        msg: Rebooting system via Ansible
      when:
        - docker_requires_reload|default(False)

    - name: reload systemctl and restart docker service if necessary
      systemd:
        daemon_reload: yes
        name: docker
        state: "{% if docker_requires_reload|default(False) %}restarted{% else %}started{% endif %}"
      when: docker_requires_reload|default(False)
  tags:
    - always