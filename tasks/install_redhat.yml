---
- name: Wait for locks
  ansible.builtin.include_tasks:
    file: wait_for_locks.yml

- name: Disable SELinux, Configure FirewallD ports to ACCEPT [RHEL/CentOS]
  block:
    - name: Disable SELinux
      ansible.posix.selinux:
        state: disabled

    - name: Configure Firewalld allowed ports
      ansible.posix.firewalld:
        port: "{{ item }}"
        permanent: true
        immediate: true
        state: enabled
      loop: "{{ docker_allowed_ports }}"

- name: Install Docker Community Edition (RHEL Major >= 8)
  when:
    - docker_install_community_edition
    - ansible_distribution_major_version is version('7', '<=')
  block:
    - name: Remove OS Repository Docker Packages
      ansible.builtin.dnf:
        name: "{{ docker_io_pkgs }}"
        state: absent

    - name: Install Docker GPG Key
      ansible.builtin.rpm_key:
        key: "{{ docker_repo_url }}/{{ ansible_distribution | lower }}/gpg"
        state: present

    - name: Set up Docker Community Edition Repository
      ansible.builtin.yum_repository:
        baseurl: "{{ docker_repo_url }}/{{ ansible_distribution | lower }}/$releasever/$basearch/{{ docker_ce_version }}"
        name: docker-ce
        description: Docker Community Edition

    - name: Install Docker Community Edition Packages
      ansible.builtin.dnf:
        name: "{{ docker_ce_pkgs }}"
        update_cache: true
        state: latest
        update_only: true
      register: docker_pkg_install
      until: docker_pkg_install is not failed
      notify: Reload Docker

- name: Install Docker Community Edition (RHEL Major <= 7)
  when:
    - docker_install_community_edition
    - ansible_distribution_major_version is version('8', '>=')

  block:
    - name: Remove OS Repository Docker Packages
      ansible.builtin.dnf:
        name: "{{ docker_io_pkgs }}"
        state: absent

    - name: Install Docker GPG Key
      ansible.builtin.rpm_key:
        key: "{{ docker_repo_url }}/{{ ansible_distribution | lower }}/gpg"
        state: present

    - name: Set up Docker Community Edition Repository
      ansible.builtin.yum_repository:
        baseurl: "{{ docker_repo_url }}/{{ ansible_distribution | lower }}/7/$basearch/{{ docker_ce_version }}"
        name: docker-ce
        description: Docker Community Edition

    - name: Manually Install containerd.io Package
      ansible.builtin.dnf:
        name: https://download.docker.com/linux/centos/7/x86_64/stable/Packages/containerd.io-1.2.6-3.3.el7.x86_64.rpm

    - name: Install Docker Community Edition Packages
      ansible.builtin.dnf:
        name: "{{ docker_ce_pkgs }}"
        update_cache: true
        state: latest
        update_only: true
      register: docker_pkg_install
      until: docker_pkg_install is not failed
      notify: Reload Docker

- name: Install Docker from OS Repository
  when:
    - not docker_install_community_edition
  block:
    - name: Remove Docker Community-Edition Packages
      ansible.builtin.dnf:
        name: "{{ docker_ce_pkgs }}"
        state: absent

    - name: Install Docker Packages From OS Repository
      ansible.builtin.dnf:
        name: "{{ docker_io_pkgs }}"
        update_cache: true
        state: latest
        update_only: true
      register: docker_pkg_install
      until: docker_pkg_install is not failed
      notify: Reload Docker

- name: Configure kernel modules for nvidia
  when:
    - docker_install_nvidia | default(false)
  tags:
    - docker-install-nvidia
  block:
    - name: Blacklist nouveau kernel module when cuda cards are present
      ansible.builtin.copy:
        dest: /etc/modprobe.d/blacklist-nouveau.conf
        content: |
          blacklist nouveau
          options nouveau modset=0
        mode: "0644"
      notify: Update Initramfs
      register: blacklist_nouveau
      when:
        - not (docker_vgpu | default(False))

    - name: Flush handlers
      ansible.builtin.meta: flush_handlers

    - name: Update dracut
      ansible.builtin.command:
        cmd: dracut --force
      register: dracut_update_result
      until: dracut_update_result is not failed
      when:
        - dracut_requires_update | default(False)
        - not (docker_vgpu | default(False))
      changed_when: dracut_update_result is defined

    - name: Reboot after dracut update and nouveau module blacklist
      ansible.builtin.reboot:
        connect_timeout: 10
        reboot_timeout: 600
        msg: Rebooting system via Ansible
      when:
        - dracut_requires_update|default(False)
        - dracut_update_result is defined
        - dracut_update_result.rc -eq 0
        - not (docker_vgpu | default(False))

- name: Add nvidia driver repo and packages
  ansible.builtin.include_tasks:
    file: docker-install-nvidia-vgpu.yml
    apply:
      tags: docker-install-nvidia
  when:
    - docker_install_nvidia | default(False)
    - docker_vgpu.enabled | default(False)
  tags:
    - docker-install-nvidia

- name: Add nvidia driver repo and packages
  ansible.builtin.include_tasks:
    file: docker-install-nvidia.yml
    apply:
      tags: docker-install-nvidia
  when:
    - docker_install_nvidia | default(False)
    - not docker_vgpu.enabled | default(False)
  tags:
    - docker-install-nvidia

# - name: Wait for locks
#   ansible.builtin.include_tasks:
#     file: wait_for_locks.yml

# - name: Enable EPEL repo
#   ansible.builtin.dnf:
#     name: "{{ epel_rpm }}"
#     state: present

# - name: Install yum repository for drivers
#   ansible.builtin.yum_repository:
#     name: cuda-"{{ ansible_distribution }}"
#     file: cuda-{{ ansible_distribution }}
#     baseurl: http://developer.download.nvidia.com/compute/cuda/repos//{{ ansible_distribution }}/{{ ansible_machine }}
#     state: present

# - name: Add repositories for nvidia docker drivers, runtime environments, packages
#   ansible.builtin.get_url:
#     url: https://nvidia.github.io/nvidia-docker/{{ ansible_distribution | lower }}{{ ansible_lsb.release }}/nvidia-docker.list
#     dest: /etc/apt/sources.list.d/nvidia-docker.list
#     mode: 644

# - name: Wait for locks
#   ansible.builtin.include_tasks:
#     file: wait_for_locks.yml

# - name: Install dependencies for building kernel modules and drivers
#   ansible.builtin.package:
#     name: "{{ docker_nvidia_driver_dependencies }}"
#     state: present
#   register: install_nvidia_dependencies
#   until: install_nvidia_dependencies is not failed
#   notify: Reload Docker
#   when:
#     - not (docker_vgpu | default(False))

# - name: Install video driver for our card
#   ansible.builtin.dnf:
#     name: "{{ docker_nvidia_driver_packages }}"
#     state: present
#     update_cache: true
#   register: install_nvidia_drivers
#   until: install_nvidia_drivers is not failed
#   notify: Reload Docker
#   when:
#     - not (docker_vgpu | default(False))

# - name: Install grid video driver
#   ansible.builtin.dnf:
#     name: "{{ docker_vgpu.driver_url }}"
#     state: present
#     update_cache: true
#     validate_certs: false
#   register: install_nvidia_drivers
#   until: install_nvidia_drivers is not failed
#   notify: Reload Docker
#   when:
#     - docker_vgpu.driver_url | default(None) is string

# - name: Retrieve grid license token
#   ansible.builtin.uri:
#     uri: "{{ docker_vgpu.license_url | trim('/') }}/-/client-token"
#     method: GET
#     dest: /etc/nvidia/ClientConfigToken/client_configuration_token_{{ '%d-%m-%Y-%H-%M-%S' | strftime }}.tok
#     validate_certs: false
#     mode: "0644"
#   when:
#     - docker_vgpu.license_url | default(None) is string

# - name: Wait for locks
#   ansible.builtin.include_tasks:
#     file: wait_for_locks.yml

# - name: Install nvidia-docker and container runtime
#   ansible.builtin.dnf:
#     name: "{{ docker_nvidia_docker_packages }}"
#     state: present
#     update_cache: true
#   register: install_nvidia_runtime
#   until: install_nvidia_runtime is not failed
#   notify: Reload Docker

- name: Reboot host if necessary
  tags:
    - always
  block:
    - name: Flush handlers
      ansible.builtin.meta: flush_handlers

    - name: Reboot after docker updates
      ansible.builtin.reboot:
        connect_timeout: 10
        reboot_timeout: 600
        msg: Rebooting system via Ansible
      when:
        - docker_requires_reload|default(False)
