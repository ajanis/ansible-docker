---
- name: Wait for locks
  ansible.builtin.include_tasks:
    file: wait_for_locks.yml

- name: Install Docker Community Edition
  when:
    - docker_install_community_edition
  block:
    - name: Get dpkg architecture
      ansible.builtin.command: dpkg --print-architecture
      register: dpkg_architecture_result
      changed_when: false

    - name: Set machine architecture
      ansible.builtin.set_fact:
        dpkg_architecture: "{{ dpkg_architecture_result.stdout }}"

    - name: Remove OS Repository Docker Packages
      ansible.builtin.apt:
        name: "{{ docker_io_pkgs }}"
        state: absent

    - name: Remove old repo file
      ansible.builtin.file:
        path: /etc/apt/sources.list.d/docker-ce.list
        state: absent

    - name: Add Docker repository and GPG Key
      ansible.builtin.deb822_repository:
        name: docker-ce
        types: deb
        enabled: true
        state: present
        allow_insecure: true
        uris: "{{ docker_repo_url }}/{{ ansible_distribution | lower }}"
        suites: "{{ ansible_distribution_release }}"
        components: "{{ docker_ce_version }}"
        signed_by: "{{ docker_repo_url }}/{{ ansible_distribution | lower }}/gpg"
      register: docker_repo_added

    - name: packages-debian | Update APT Repos # noqa no-handler
      ansible.builtin.apt:
        update_cache: true
      register: cache_updated
      until:
        - cache_updated is not failed
      when:
        - docker_repo_added is changed

    - name: Install Docker Community Edition Packages # noqa package-latest
      ansible.builtin.apt:
        name: "{{ docker_ce_pkgs }}"
        state: latest
      register: docker_pkg_install
      until: docker_pkg_install is not failed
      notify: Reload Docker

- name: Install Docker from OS Repository
  when:
    - not docker_install_community_edition
  block:
    - name: Remove Docker Community-Edition Packages
      ansible.builtin.apt:
        name: "{{ docker_ce_pkgs }}"
        state: absent

    - name: packages-debian | Update APT Repos # noqa no-handler
      ansible.builtin.apt:
        update_cache: true
      register: cache_updated
      until:
        - cache_updated is not failed

    - name: Install Docker Packages From OS Repository # noqa package-latest
      ansible.builtin.apt:
        name: "{{ docker_io_pkgs }}"
        state: latest
      register: docker_pkg_install
      until: docker_pkg_install is not failed
      notify: Reload Docker

- name: Create systemd override for Docker service
  when:
    - ansible_os_family == "Debian"
  block:
    - name: Create systemd Docker service.d directory
      ansible.builtin.file:
        path: /etc/systemd/system/docker.service.d
        state: directory
        mode: "0644"
        owner: root
        group: root
      notify: Reload Docker

    - name: Create systemd Docker override config
      ansible.builtin.template:
        src: docker-override.conf.j2
        dest: /etc/systemd/system/docker.service.d/override.conf
        mode: "0644"
      register: docker_override
      notify: Reload Docker

- name: Install runtime environments, packages, modules and configurations for docker nvidia support
  when:
    - docker_install_nvidia | default(false)
  tags:
    - install-nvidia
  block:
    - name: Blacklist nouveau kernel module when cuda cards are present
      ansible.builtin.copy:
        dest: /etc/modprobe.d/blacklist-nouveau.conf
        content: |
          blacklist nouveau
          options nouveau modset=0
        mode: "0644"
      notify: Update Initramfs
      register: blacklist_nouveau

    - name: Flush handlers
      ansible.builtin.meta: flush_handlers

    - name: Update initramfs
      ansible.builtin.command:
        cmd: update-initramfs -u
      register: initramfs_update_result
      until: initramfs_update_result is not failed

      changed_when: initramfs_update_result is changed
      when:
        - initramfs_requires_update|default(false)

    - name: Reboot after initramfs update and nouveau module blacklist
      ansible.builtin.reboot:
        connect_timeout: 10
        reboot_timeout: 600
        msg: Rebooting system via Ansible
      when:
        - initramfs_requires_update|default(False)
        - initramfs_update_result is defined
        - initramfs_update_result.rc|int == 0

    - name: Wait for locks
      ansible.builtin.include_tasks:
        file: wait_for_locks.yml

    - name: Remove old repo file
      ansible.builtin.file:
        path: /etc/apt/sources.list.d/nvidia-docker.list

    - name: Add nvidia-docker2 repository and gpg-key
      ansible.builtin.deb822_repository:
        name: nvidia-docker
        types: deb
        allow_insecure: true
        uris:
          - "{{ nvidia_repo_url }}/libnvidia-container/{{ docker_nvidia_version }}/deb/$(ARCH)/"
        suites:
          - /
        signed_by: "{{ nvidia_repo_url }}/nvidia-container-runtime/gpgkey"
      register: nvidia_repo_added

    - name: packages-debian | Update APT Repos # noqa no-handler
      ansible.builtin.apt:
        update_cache: true
      register: cache_updated
      until:
        - cache_updated is not failed
      when:
        - nvidia_repo_added is changed

    - name: Install dependencies for building kernel modules and drivers
      ansible.builtin.apt:
        name: "{{ docker_nvidia_driver_dependencies }}"
        state: present
      register: install_nvidia_dependencies
      until: install_nvidia_dependencies is not failed
      notify: Reload Docker
      when:
        - not (docker_vgpu | default(False))

    - name: Install video driver for our card
      ansible.builtin.apt:
        name: "{{ docker_nvidia_driver_packages }}"
        state: present
      register: install_nvidia_drivers
      until: install_nvidia_drivers is not failed
      notify: Reload Docker
      when:
        - not (docker_vgpu | default(False))

    - name: Install grid video driver
      ansible.builtin.apt:
        deb: "{{ docker_vgpu.driver_url }}"
        state: present
      register: install_nvidia_drivers
      until: install_nvidia_drivers is not failed
      notify: Reload Docker
      when:
        - docker_vgpu.driver_url | default(None) is string

    - name: Retrieve grid license token
      ansible.builtin.uri:
        uri: "{{ docker_vgpu.license_url | trim('/') }}/-/client-token"
        method: GET
        dest: /etc/nvidia/ClientConfigToken/client_configuration_token_{{ '%d-%m-%Y-%H-%M-%S' | strftime }}.tok
        validate_certs: false
        mode: "0644"
      when:
        - docker_vgpu.license_url | default(None) is string

    - name: Install nvidia-docker2 and container runtime packages
      ansible.builtin.apt:
        name: "{{ docker_nvidia_docker_packages }}"
        state: present
      register: install_nvidia_runtime
      until: install_nvidia_runtime is not failed
      retries: 10
      timeout: 300
      delay: 10
      notify: Reload Docker

    - name: Create nvidia patch directory
      ansible.builtin.file:
        path: "{{ docker_nvidia_transcode_patch_dir }}"
        state: directory
        mode: "0755"
        owner: root
        group: root
      when:
        - not (docker_vgpu | default(False))

    - name: Download patch to allow more than 2 hardware transcodes
      ansible.builtin.git:
        repo: "{{ docker_nvidia_transcode_patch }}"
        dest: "{{ docker_nvidia_transcode_patch_dir }}/nvidia-patch"
        clone: true
        update: true
        version: master
      when:
        - not (docker_vgpu | default(False))

    - name: Patch nvidia drivers if needed
      ansible.builtin.command:
        cmd: ./patch.sh
        chdir: "{{ docker_nvidia_transcode_patch_dir }}/nvidia-patch"
        creates: "{{ docker_nvidia_transcode_patch_dir }}/libnvidia-encode-backup"
      register: nvidia_transcode_patch_result
      until: nvidia_transcode_patch_result is not failed
      notify: Reload Docker
      when:
        - docker_nvidia_transcode_patch_dir ~ '/libnvidia-encode-backup' is not file
        - not (docker_vgpu | default(False))

- name: Reboot host if necessary
  tags:
    - always
  block:
    - name: Flush handlers
      ansible.builtin.meta: flush_handlers

    - name: Reboot after docker updates
      ansible.builtin.reboot:
        connect_timeout: 10
        reboot_timeout: 600
        msg: Rebooting system via Ansible
      when:
        - docker_requires_reload | default(False)
