
- name: Install Docker Community Edition
  block:
    - name: Get dpkg architecture
      command: dpkg --print-architecture
      register: dpkg_architecture_result
      check_mode: false
    - name: Set machine architecture
      set_fact:
        dpkg_architecture: "{{ dpkg_architecture_result.stdout }}"
    - name: Remove old Docker versions
      apt:
        name: "{{ docker_io_pkgs + docker_old_pkgs }}"
        state: absent
    - name: Install Docker GPG Key
      apt_key:
        url: "{{ docker_repo_url }}/{{ ansible_distribution | lower }}/gpg"
        state: present
    - name: Set up Docker Community Edition add-apt-repository
      apt_repository:
        repo: "deb [arch={{ dpkg_architecture }}] {{ docker_repo_url }}/{{ ansible_distribution | lower }} {{ ansible_distribution_release }} {{ docker_ce_version }}"
        filename: docker-ce
    - name: Install Docker Community Edition
      apt:
        name: "{{ docker_ce_pkgs }}"
        update_cache: yes
        state: present
  when:
    - docker_install_community_edition
  tags:
    - install-docker-ce

- name: Install Docker from OS Repository
  block:
    - name: Remove old Docker versions
      apt:
        name: "{{ docker_ce_pkgs + docker_old_pkgs }}"
        state: absent
    - name: Install Docker from OS Repo
      apt:
        name: "{{ docker_io_pkgs }}"
        update_cache: yes
        state: present
  when:
    - not docker_install_community_edition
  tags:
    - install-docker-osversion

- name: Install runtime environments, packages, modules and configurations for docker nvidia support
  block:
    - name: Blacklist nouveau kernel module when cuda cards are present
      copy:
        dest: /etc/modprobe.d/blacklist-nouveau.conf
        content: |
          blacklist nouveau
          options nouveau modset=0
        mode: 0644
      notify: initramfs requires update
      register: blacklist_nouveau

    - meta: flush_handlers

    - name: update initramfs
      shell:
        cmd: update-initramfs -u
      register: initramfs_update_result
      when:
        - initramfs_requires_update|default(false)

    - name: Reboot after initramfs update and nouveau module blacklist
      reboot:
        connect_timeout: 10
        reboot_timeout: 600
        msg: Rebooting system via Ansible
      when:
        - initramfs_requires_update|default(False)
        - initramfs_update_result is defined
        - initramfs_update_result.rc|int == 0

    - name: Import nvidia-docker GPG key
      apt_key:
        url: https://nvidia.github.io/nvidia-docker/gpgkey
        state: present

#    - name: Add repositories for graphics-driver support when nvidia cards are present
#      apt_repository:
#        repo: "{{ item }}"
#        state: present
#        filename: nvidia-docker
#      loop:
#        - "deb https://nvidia.github.io/libnvidia-container/stable/{{ ansible_distribution|lower }}{{ ansible_distribution_release }}/{{ dpkg_architecture }}"
#        - "deb https://nvidia.github.io/nvidia-container-runtime/stable/{{ ansible_distribution|lower }}{{ ansible_distribution_release }}/{{ dpkg_architecture }}"
#        - "deb https://nvidia.github.io/nvidia-docker/{{ ansible_distribution|lower }}{{ ansible_distribution_release }}/{{ dpkg_architecture }}"

    - name: Add repositories for nvidia docker drivers, runtime environments, packages
      get_url:
        url: "https://nvidia.github.io/nvidia-docker/{{ ansible_distribution|lower }}{{ ansible_lsb.release  }}/nvidia-docker.list"
        dest: /etc/apt/sources.list.d/nvidia-docker.list
        mode: 644

    - name: Install dependencies for building kernel modules and drivers
      apt:
        name: "{{ nvidia_driver_dependencies }}"
        state: present
        autoclean: yes
        update_cache: yes

    - name: install video driver for our card
      apt:
        name: "{{ nvidia_driver_packages }}"
        state: present
        autoclean: yes
        update_cache: yes
      notify: reload docker

    - name: Install nvidia-docker2 and container runtime packages
      apt:
        name: "{{ nvidia_docker_packages }}"
        state: present
        autoclean: yes
        update_cache: yes
      notify: reload docker

    - name: Add nvidia runtime config file to docker
      copy:
        src: docker-daemon.json
        dest: /etc/docker/daemon.json
        owner: root
        group: root
        mode: 0755
      notify: reload docker

    - name: stat nvidia path repo directory
      stat:
        path: "{{ docker_nvidia_workdir }}"
      ignore_errors: True
      register: nvidia_patch_directory
    - set_fact:
        install_nvidia_path: True
      when:
        - not nvidia_patch_directory.stat.exists|default(False)

    - name: Create nvidia patch directory
      file:
        path: "{{ docker_nvidia_workdir }}"
        state: directory
        mode: 0755
        recurse: True
      when:
        - install_nvidia_path|default(False)

    - name: Download patch to allow more than 2 hardware transcodes
      git:
        repo: "{{ docker_nvidia_transcode_patch_repo }}"
        dest: "{{ docker_nvidia_workdir }}"
        update: no
      when:
        - install_nvidia_path|default(False)

    - name: Patch nvidia drivers if needed
      shell:
        cmd: ./patch.sh
        chdir: "{{ docker_nvidia_transcode_patch_dir }}"
        creates: "{{ docker_nvidia_creates }}"
      register: nvidia_transcode_patch_result
      notify: reload docker
  when:
    - docker_install_nvidia
    - install_nvidia_path|default(False)
  tags:
    - install-docker-nvidia

- name: Reboot host if necessary
  block:
    - meta: flush_handlers

    - name: Reboot after docker updates
      reboot:
        connect_timeout: 10
        reboot_timeout: 600
        msg: Rebooting system via Ansible
      when:
        - docker_requires_reload|default(False)

    - name: reload systemctl and restart docker service if necessary
      systemd:
        daemon_reload: yes
        name: docker
        state: "{% if docker_requires_reload|default(False) %}restarted{% else %}started{% endif %}"
      when: docker_requires_reload|default(False)
  tags:
    - always
