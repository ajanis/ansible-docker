- name: Install Docker Community Edition
  when:
    - docker_install_community_edition
  block:

    - name: Get dpkg architecture
      ansible.builtin.command: dpkg --print-architecture
      register: dpkg_architecture_result
      changed_when: false
      tags:
        - docker-install

    - name: Set machine architecture
      ansible.builtin.set_fact:
        dpkg_architecture: "{{ dpkg_architecture_result.stdout }}"
      tags:
        - docker-install

    - name: Remove OS Repository Docker Packages
      ansible.builtin.apt:
        name: "{{ docker_io_pkgs }}"
        state: absent
      tags:
        - docker-install

    - name: Install Docker GPG Key
      ansible.builtin.apt_key:
        url: "{{ docker_repo_url }}/{{ ansible_distribution | lower }}/gpg"
        state: present
      tags:
        - docker-install

    - name: Set up Docker Community Edition Repository
      ansible.builtin.apt_repository:
        repo: deb [arch={{ dpkg_architecture }}] {{ docker_repo_url }}/{{ ansible_distribution | lower }} {{ ansible_distribution_release }} {{ docker_ce_version }}
        filename: docker-ce
      tags:
        - docker-install

    - name: Install Docker Community Edition Packages
      ansible.builtin.apt:
        name: "{{ docker_ce_pkgs }}"
        update_cache: true
        state: present
      tags:
        - docker-install
  tags:
    - docker-install


- name: Install Docker from OS Repository
  when:
    - not docker_install_community_edition
  block:
    - name: Remove Docker Community-Edition Packages
      ansible.builtin.apt:
        name: "{{ docker_ce_pkgs }}"
        state: absent
      tags:
        - docker-install

    - name: Install Docker Packages From OS Repository
      ansible.builtin.apt:
        name: "{{ docker_io_pkgs }}"
        update_cache: true
        state: present
      tags:
        - docker-install
  tags:
    - docker-install

- name: Install runtime environments, packages, modules and configurations for docker nvidia support
  when:
    - docker_install_nvidia | default(false)
  tags:
    - install-docker-nvidia
  block:
    - name: Blacklist nouveau kernel module when cuda cards are present
      ansible.builtin.copy:
        dest: /etc/modprobe.d/blacklist-nouveau.conf
        content: |
          blacklist nouveau
          options nouveau modset=0
        mode: "0644"
      notify: initramfs requires update
      register: blacklist_nouveau
      tags:
        - install-docker-nvidia

    - name: Flush handlers
      ansible.builtin.meta: flush_handlers
      tags:
        - install-docker-nvidia

    - name: Update initramfs
      ansible.builtin.command:
        cmd: update-initramfs -u
      register: initramfs_update_result
      changed_when: initramfs_update_result is changed
      when:
        - initramfs_requires_update|default(false)
      tags:
        - install-docker-nvidia

    - name: Reboot after initramfs update and nouveau module blacklist
      ansible.builtin.reboot:
        connect_timeout: 10
        reboot_timeout: 600
        msg: Rebooting system via Ansible
      when:
        - initramfs_requires_update|default(False)
        - initramfs_update_result is defined
        - initramfs_update_result.rc|int == 0
      tags:
        - install-docker-nvidia

    - name: Import nvidia-docker GPG key
      ansible.builtin.apt_key:
        url: https://nvidia.github.io/nvidia-docker/gpgkey
        state: present
      tags:
        - install-docker-nvidia

    - name: Add repositories for nvidia docker drivers, runtime environments, packages
      ansible.builtin.get_url:
        url: "https://nvidia.github.io/nvidia-docker/{{ ansible_distribution | lower }}{{ ansible_lsb.release }}/nvidia-docker.list"
        dest: /etc/apt/sources.list.d/nvidia-docker.list
        mode: "0644"
      tags:
        - install-docker-nvidia

    - name: Install dependencies for building kernel modules and drivers
      ansible.builtin.apt:
        name: "{{ docker_nvidia_driver_dependencies }}"
        state: present
        autoclean: true
        update_cache: true
      tags:
        - install-docker-nvidia

    - name: Install video driver for our card
      ansible.builtin.apt:
        name: "{{ docker_nvidia_driver_packages }}"
        state: present
        autoclean: true
        update_cache: true
      notify: reload docker
      tags:
        - install-docker-nvidia

    - name: Install nvidia-docker2 and container runtime packages
      ansible.builtin.apt:
        name: "{{ docker_nvidia_docker_packages }}"
        state: present
        autoclean: true
        update_cache: true
      notify: reload docker
      tags:
        - install-docker-nvidia

    - name: Create nvidia patch directory
      ansible.builtin.file:
        path: "{{ docker_nvidia_transcode_patch_dir }}"
        state: directory
        mode: "0755"
        owner: root
        group: root
      tags:
        - install-docker-nvidia

    - name: Download patch to allow more than 2 hardware transcodes
      ansible.builtin.git:
        repo: "{{ docker_nvidia_transcode_patch }}"
        dest: "{{ docker_nvidia_transcode_patch_dir }}/nvidia-patch"
        clone: true
        update: true
        version: master
      tags:
        - install-docker-nvidia

    - name: Patch nvidia drivers if needed
      ansible.builtin.command:
        cmd: ./patch.sh
        chdir: "{{ docker_nvidia_transcode_patch_dir }}/nvidia-patch"
        creates: "{{ docker_nvidia_transcode_patch_dir }}/libnvidia-encode-backup"
      register: nvidia_transcode_patch_result
      notify: reload docker
      when:
        - docker_nvidia_transcode_patch_dir ~ '/libnvidia-encode-backup' is not file
      tags:
        - install-docker-nvidia
  tags:
    - install-docker-nvidia


- name: Reboot host if necessary
  block:

    - name: Flush handlers
      ansible.builtin.meta: flush_handlers
      tags:
        - docker-install

    - name: Reboot after docker updates
      ansible.builtin.reboot:
        connect_timeout: 10
        reboot_timeout: 600
        msg: Rebooting system via Ansible
      when:
        - docker_requires_reload | default(False)
      tags:
        - docker-install

    - name: Reload systemctl and restart docker service if necessary
      ansible.builtin.systemd:
        daemon_reload: true
        name: docker
        state: "{% if docker_requires_reload | default(False) %}restarted{% else %}started{% endif %}"
      when: docker_requires_reload | default(false)
      tags:
        - docker-install
  tags:
    - docker-install
