---
- name: Create working list of docker-compose services
  ansible.builtin.set_fact:
    compose_services: "{{ item.definition.services }}"
  loop: "{{ docker_compose_projects }}"
  loop_control:
    label: "{{ item.project_name }}"
  tags:
    - docker-container

- name: Print containers in docker-compose project
  ansible.builtin.debug:
    msg: |
      {{ item.project_name }}:
      {% for container in compose_services %}
        - {{ container }}
      {% endfor %}
  loop: "{{ docker_compose_projects }}"
  loop_control:
    label: "{{ item.project_name }}"
  tags:
    - docker-container

- name: Print bind-mounts for each container in docker-compopse project
  ansible.builtin.debug:
    msg: |
      {{ item.key }}:
      {% for volume in item.value.volumes %}
        - {{ volume }}
      {% endfor %}
  loop: "{{ compose_services | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  tags:
    - docker-container

- name: Create bind-mount directories for each container in docker-compose project
  ansible.builtin.file:
    state: directory
    path: "{{ item.1.split(':')[0] }}"
    mode: "0755"
    owner: "{{ item.0.environment.PUID | default('root') }}"
    group: "{{ item.0.environment.PGID | default('root') }}"
  loop: "{{ compose_services | subelements('volumes', skip_missing=True) }}"
  loop_control:
    label: "{{ item.1 }}"
  when:
    - item.1.split(':')[0] is defined
    - item.1.split(':')[0] != None
    - item.1.split(':')[0] is not search('/var/run/docker.sock') # Ignore docker socket
    - item.1.split(':')[0] is not match('^.*?\.[^/]+$') # Ignore file bindings
    - item.1.split(':')[0] is not match('^[^/]+$') # Ignore docker volumes
    - item.1.split(':')[0] is not search('/data')
    - item.1.split(':')[0] is not search('/media')
    - item.1.split(':')[0] is not search('/etc/localtime')
    - item.1.split(':')[0] is not search('/dev/rtc')
  tags:
    - docker-container

- name: Bring up docker-compose projects
  community.docker.docker_compose:
    project_name: "{{ item.project_name }}"
    pull: "{{ item.pull | default('false') }}"
    state: present
    definition: "{{ item.definition }}"
  loop: "{{ docker_compose_projects }}"
  loop_control:
    label: "{{ item.project_name }}"
  register: compose_up_output
  tags:
    - docker-compose

- name: Print docker-compose result
  ansible.builtin.debug:
    var: compose_up_output
    verbosity: 0
  when: compose_up_output
  tags:
    - docker-compose
