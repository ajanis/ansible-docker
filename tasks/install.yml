---

- name: Install Docker [Debian/Ubuntu]
  import_tasks: install_debian.yml
  when:
    - ansible_os_family == "Debian"

- name: Install Docker [RedHat]
  import_tasks: install_redhat.yml
  when:
    - ansible_os_family == "RedHat"

- name: Start and enable docker-ce services
  block:
    - name: Start and enable docker socket
      systemd:
        name: docker.socket
        state: restarted
        masked: no
        enabled: yes
        daemon_reload: yes
    - name: Start and enable docker service
      systemd:
        name: docker.service
        masked: no
        state: restarted
        enabled: yes
        daemon_reload: yes
  when:
    - docker_install_community_edition

- name: Create systemd override for Docker service
  block:
    - name: Create systemd Docker service.d directory
      file:
        path: "/etc/systemd/system/docker.service.d"
        state: directory

    - name: Create systemd Docker override config
      template:
        src: docker-override.conf.j2
        dest: "/etc/systemd/system/docker.service.d/override.conf"
        mode: 0755
      register: docker_override

    - name: Reload systemd service and restart docker service # noqa 503
      systemd:
        name: "docker.service"
        masked: no
        state: restarted
        enabled: yes
        daemon_reload: yes
      when: docker_override.changed
  when:
    - ansible_os_family == "Debian"

- name: Install Package Dependencies
  package:
    name: "{{ docker_dependency_pkgs }}"
    state: present

- name: Upgrade python-pip
  pip:
    name: pip
    state: present

- name: Install Python Packages
  block:
    - name: install python docker modules
      pip:
        name: "{{ docker_py26_pkgs }}"
        state: present
        executable: pip2
      when:
        - ansible_python.version.minor <= 6
    - name: uninstall deprecated python 2.7 docker modules
      pip:
        name: "{{ docker_py26_pkgs }}"
        state: absent
        executable: pip2
      when:
        - ansible_python.version.minor >= 7
    - name: install python 2.7 docker modules
      pip:
        name: "{{ docker_py27_pkgs }}"
        state: present
        executable: pip2
      when:
        - ansible_python.version.minor >= 7
  when:
    - ansible_python.version.major == 2

- name: Install Python3 Packages
  block:
    - name: install python3 docker modules
      pip:
        name: "{{ docker_py3_pkgs }}"
        state: present
        executable: pip3
  when:
    - ansible_python.version.major == 3

- name: Collect additional docker configs
  tags:
    - docker_daemon_config
  block:

    - name: Check for GPU presence
      ansible.builtin.command:
        cmd: 'nvidia-smi -L'
      register: nvidia_presence
      changed_when: no
      failed_when: no

    - name: Check for Docker presence
      ansible.builtin.command:
        cmd: 'docker -v'
      register: docker_presence
      changed_when: no
      failed_when: no

    - name: "GPU Configurations"
      block:

        - name: "Print GPU info"
          ansible.builtin.debug:
            msg: "{{ nvidia_presence.stdout }}"

        - name: "Set 'has_gpu' fact"
          ansible.builtin.set_fact:
            has_gpu: true

      when:
        - "'GPU' in nvidia_presence.stdout"

    - name: "Docker Configurations"
      block:

        - name: "Print Docker info"
          ansible.builtin.debug:
            msg: "{{ docker_presence.stdout }}"

        - name: "Set 'has_docker' fact"
          ansible.builtin.set_fact:
            has_docker: true
        - name: Check for existing docker daemon config
          ansible.builtin.stat:
            path: /etc/docker/daemon.json
          register: docker_daemon_json
        - debug:
            var: docker_daemon_json
            verbosity: 1
        - name: Slurp JSON from file
          ansible.builtin.slurp:
            src: /etc/docker/daemon.json
          register: docker_daemon_configfile
          when:
            - docker_daemon_json.stat.exists
        - debug:
            var: docker_daemon_configfile.content|b64decode
            verbosity: 1
          when:
            - docker_daemon_json.stat.exists
      when:
        - "'version' in docker_presence.stdout"

    - name: Update Docker daemon config
      block:    
        - name: Set empty array for docker daemon config
          set_fact:
            docker_daemon_config: {}
        - name: Set daemon config to existing file content if found
          set_fact:
            docker_daemon_config: "{{docker_daemon_configfile.content|b64decode}}"
        - debug:
            var: docker_daemon_config|to_nice_json
            verbosity: 1
        - name: Add experimental metrics endpoint
          set_fact:
            docker_daemon_config: "{{ docker_daemon_config | combine({ 'experimental': true, 'metrics-addr': '0.0.0.0:9323' },recursive=true) }}"
          when:
            - has_docker|default(false)
            - "'metrics-addr' not in docker_daemon_config|default({})"
        - debug:
            var: docker_daemon_config|to_nice_json
            verbosity: 1
        - name: Add Nvidia runtime to docker daemon config
          set_fact:
            docker_daemon_config: "{{ docker_daemon_config|combine({ 'runtimes': {'nvidia': { 'path': '/usr/bin/nvidia-container-runtime', 'runtimeArgs': [] } } },recursive=true) }}"
          when:
            - has_gpu|default(false)
            - "'nvidia' not in docker_daemon_config.runtimes|default({})"
        - debug:
            var: docker_daemon_config|to_nice_json
            verbosity: 1
        - name: Write modified Docker daemon json
          copy:
            content: "{{ docker_daemon_config | to_nice_json }}"
            dest: /etc/docker/daemon.json
          register: docker_daemon_updated

        - name: Restart docker service
          service:
            name: docker
            state: restarted
          when: docker_daemon_updated
