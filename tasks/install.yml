---

- name: Install Docker [Debian/Ubuntu]
  ansible.builtin.include_tasks:
    file: install_debian.yml
  when:
    - ansible_os_family == "Debian"

- name: Install Docker [RedHat]
  ansible.builtin.include_tasks:
    file: install_redhat.yml
  when:
    - ansible_os_family == "RedHat"

- name: Start and enable docker-ce services
  when:
    - docker_install_community_edition
  block:
    - name: Start and enable docker socket
      ansible.builtin.systemd:
        name: docker.socket
        state: restarted
        masked: false
        enabled: true
        daemon_reload: true
      tags:
        - docker-install
    - name: Start and enable docker service
      ansible.builtin.systemd:
        name: docker.service
        masked: false
        state: restarted
        enabled: true
        daemon_reload: true
      tags:
        - docker-install
  tags:
    - docker-install

- name: Create systemd override for Docker service
  when:
    - ansible_os_family == "Debian"
  block:
    - name: Create systemd Docker service.d directory
      ansible.builtin.file:
        path: "/etc/systemd/system/docker.service.d"
        state: directory
        mode: "0755"
        owner: root
        group: root
      tags:
        - docker-install

    - name: Create systemd Docker override config
      ansible.builtin.template:
        src: docker-override.conf.j2
        dest: "/etc/systemd/system/docker.service.d/override.conf"
        mode: "0755"
      register: docker_override
      tags:
        - docker-install

    - name: Reload systemd service and restart docker service # noqa no-handler
      ansible.builtin.systemd:
        name: "docker.service"
        masked: false
        state: restarted
        enabled: true
        daemon_reload: true
      when: docker_override.changed
      tags:
        - docker-install
  tags:
    - docker-install


- name: Install Package Dependencies
  ansible.builtin.package:
    name: "{{ docker_dependency_pkgs }}"
    state: present
  tags:
    - docker-install

- name: Upgrade python-pip
  ansible.builtin.pip:
    name: pip
    state: present
  tags:
    - docker-install

- name: Install Python Packages
  when:
    - ansible_python.version.major == 2
  block:
    - name: Install python docker modules
      ansible.builtin.pip:
        name: "{{ docker_py26_pkgs }}"
        state: present
        executable: pip2
      when:
        - ansible_python.version.minor <= 6
      tags:
        - docker-install
    - name: Uninstall deprecated python 2.7 docker modules
      ansible.builtin.pip:
        name: "{{ docker_py26_pkgs }}"
        state: absent
        executable: pip2
      when:
        - ansible_python.version.minor >= 7
      tags:
        - docker-install
    - name: Install python 2.7 docker modules
      ansible.builtin.pip:
        name: "{{ docker_py27_pkgs }}"
        state: present
        executable: pip2
      when:
        - ansible_python.version.minor >= 7
      tags:
        - docker-install
  tags:
    - docker-install


- name: Install Python3 Packages
  when:
    - ansible_python.version.major == 3
  block:
    - name: Install python3 docker modules
      ansible.builtin.pip:
        name: "{{ docker_py3_pkgs }}"
        state: present
        executable: pip3
      tags:
        - docker-install
  tags:
    - docker-install

- name: Collect additional docker configs
  block:

    - name: Check for GPU presence
      ansible.builtin.command:
        cmd: 'nvidia-smi -L'
      register: nvidia_presence
      changed_when: false
      failed_when: false
      tags:
        - docker-install

    - name: Check for Docker presence
      ansible.builtin.command:
        cmd: 'docker -v'
      register: docker_presence
      changed_when: false
      failed_when: false
      tags:
        - docker-install

    - name: "GPU Configurations"
      when:
        - "'GPU' in nvidia_presence.stdout"
      block:

        - name: "Print GPU info"
          ansible.builtin.debug:
            msg: "{{ nvidia_presence.stdout }}"
          tags:
            - docker-install

        - name: "Set 'has_gpu' fact"
          ansible.builtin.set_fact:
            has_gpu: true
          tags:
            - docker-install
      tags:
        - docker-install

    - name: "Docker Configurations"
      when:
        - "'version' in docker_presence.stdout"
      block:
        - name: "Print Docker info"
          ansible.builtin.debug:
            msg: "{{ docker_presence.stdout }}"
          tags:
            - docker-install
        - name: "Set 'has_docker' fact"
          ansible.builtin.set_fact:
            has_docker: true
          tags:
            - docker-install
        - name: Check for existing docker daemon config
          ansible.builtin.stat:
            path: /etc/docker/daemon.json
          register: docker_daemon_json
          tags:
            - docker-install
        - name: Echo docker config content
          ansible.builtin.debug:
            var: docker_daemon_json
            verbosity: 1
          tags:
            - docker-install
        - name: Slurp JSON from file
          ansible.builtin.slurp:
            src: /etc/docker/daemon.json
          register: docker_daemon_configfile
          when:
            - docker_daemon_json.stat.exists
          tags:
            - docker-install
        - name: Echo docker config content
          ansible.builtin.debug:
            var: docker_daemon_configfile.content|b64decode
            verbosity: 1
          when:
            - docker_daemon_json.stat.exists
          tags:
            - docker-install
      tags:
        - docker-install


    - name: Update Docker daemon config
      block:
        - name: Set empty array for docker daemon config
          ansible.builtin.set_fact:
            docker_daemon_config: {}
          when:
            - not docker_daemon_json.stat.exists
          tags:
            - docker-install
        - name: Set daemon config to existing file content if found
          ansible.builtin.set_fact:
            docker_daemon_config: "{{ docker_daemon_configfile.content | b64decode }}"
          when:
            - docker_daemon_json.stat.exists
          tags:
            - docker-install
        - name: Echo docker config content
          ansible.builtin.debug:
            var: docker_daemon_config|to_nice_json
            verbosity: 1
          when:
            - docker_daemon_json.stat.exists
          tags:
            - docker-install
        - name: Add experimental metrics endpoint
          ansible.builtin.set_fact:
            docker_daemon_config: "{{ docker_daemon_config | combine({'experimental': true, 'metrics-addr': '0.0.0.0:9323'}, recursive=true) }}"
          when:
            - has_docker|default(false)
            - "'metrics-addr' not in docker_daemon_config|default({})"
          tags:
            - docker-install
        - name: Echo docker config content
          ansible.builtin.debug:
            var: docker_daemon_config|to_nice_json
            verbosity: 1
          tags:
            - docker-install
        - name: Add Nvidia runtime to docker daemon config
          ansible.builtin.set_fact:
            docker_daemon_config: |
              {{ docker_daemon_config | combine({'runtimes': {'nvidia': {'path': '/usr/bin/nvidia-container-runtime', 'runtimeArgs': []}}}, recursive=true) }}
          when:
            - has_gpu|default(false)
            - "'nvidia' not in docker_daemon_config.runtimes|default({})"
          tags:
            - docker-install
        - name: Echo docker config content
          ansible.builtin.debug:
            var: docker_daemon_config|to_nice_json
            verbosity: 1
          tags:
            - docker-install
        - name: Write modified Docker daemon json
          ansible.builtin.copy:
            content: "{{ docker_daemon_config | to_nice_json }}"
            dest: /etc/docker/daemon.json
            mode: "0755"
          register: docker_daemon_updated
          tags:
            - docker-install

        - name: Restart docker service
          ansible.builtin.service:
            name: docker
            state: restarted
          when: docker_daemon_updated
          tags:
            - docker-install
      tags:
        - docker-install
  tags:
    - docker-install
